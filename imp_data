import 'package:autocomplete_textfield/autocomplete_textfield.dart';
import 'package:flutter/material.dart';

void main() => runApp(new MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return new MaterialApp(
      title: 'Auto Complete TextField Demo',
      theme: new ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: new MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Widget> pages = [new FirstPage(), new SecondPage()];
  int selectedIndex = 0;

  @override
  Widget build(BuildContext context) {
    return new Scaffold(
      bottomNavigationBar: new BottomNavigationBar(
        items: [
          new BottomNavigationBarItem(
              icon: new Center(child: new Text("1")),
              title: new Text("Simple Use")),
          new BottomNavigationBarItem(
              icon: new Center(child: new Text("2")),
              title: new Text("Complex Use")),
        ],
        onTap: (index) => setState(() {
              selectedIndex = index;
            }),
        currentIndex: selectedIndex,
      ),
      body: pages[selectedIndex],
    );
  }
}



1.TabBar 

to use this use state<MyApp> with TickerProviderMixin
TabController _tabController=TabController(initialIndex:0,vsync:this,length:2),
  _controller.animateTo(_currentTabIndex);

DefaultTabController.of(context).animateTo(1);



2.App launcher Icon
add dependency to pubspec.yaml 

 flutter_launcher_icons: ^0.9.2 

flutter_icons:    
 android: "launcher_icon"    
 ios: true    
 image_path: "assets/images/logo_icon.jpg"

run: flutter pub run flutter_launcher_icons:main




3.

Android
Open AndroidManifest.xml (located at android/app/src/main)

<application
    android:label="App Name" ...> // Your app name here
iOS
Open info.plist (located at ios/Runner)

<key>CFBundleName</key>
<string>App Name</string> // Your app name here
Don't forget to run

flutter clean



4. Getting perticular data from firestore 
 FirebaseFirestore.instance
        .collection(from)
        .get()
        .then((QuerySnapshot querySnapshot) {
      querySnapshot.docs.forEach((doc) {
        data = doc['booked_seats'];
      });
    });



5. AppBar 


home: Scaffold(
        appBar: PreferredSize(
          preferredSize: Size.fromHeight(120.0),
          child: AppBar(),

 appBar: PreferredSize(
        preferredSize: Size.fromHeight(responsive.height(context) / 20),
        child: SimpleAppBar(
          label: 'Tus Favoritos',
          witdh: responsive.width(context) / 4.7,
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),


6.If no data in firebase
  if (snapshot.data!.docs.length==0) {
              return Center(
                  child: Text('No buses are available in this route',style: TextStyle(fontWeight: FontWeight.bold),));
            }


7.help screen code for infoane bus app
 SingleChildScrollView(
          child: Column(
            children: [
              Stack(children: [
                Container(
                  color: Colors.red[400],
                  height: 30,
                  width: double.infinity,
                ),
                SizedBox(
                  width: 360,
                  height: 250,
                  child: Image.asset('assets/images/signin.png'),
                ),
                Positioned(
                  top: 32,
                  right: -4.75,
                  child: IconButton(
                      onPressed: () {
                        Navigator.pop(context);
                      },
                      icon: Icon(Icons.cancel)),
                ),
              ]),
              Padding(
                padding: EdgeInsets.all(10),
                child: Column(children: [
                  Text(
                    ' Verify your details\nwith mobile number',
                    style: TextStyle(
                        color: Colors.red,
                        fontSize: 20,
                        fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 10),
                  TextFormField(
                    onTap: () => Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => MobileLoginScreen())),
                    readOnly: true,
                    cursorColor: Colors.red[400],
                    decoration: InputDecoration(
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(5),
                        ),
                        hintText: '  MobileNumber',
                        prefix: Text('+91'),
                        prefixIcon: Icon(Icons.arrow_drop_down)),
                  ),
                  SizedBox(
                    height: 10,
                  ),
                  Text(
                    'OR',
                    style: TextStyle(
                        color: Colors.black, fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 20),
                  Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        Column(children: [
                          GestureDetector(
                            child: SizedBox(
                              height: 60,
                              width: 60,
                              child: CircleAvatar(
                                backgroundColor: Colors.white,
                                child: Image.asset('assets/images/google1.png'),
                              ),
                            ),
                            onTap: () {
                              signup(context);
                            },
                          ),
                          TextButton(
                              onPressed: () => signup(context),
                              child: Text('   Google\nverification')),
                        ]),
                        Column(children: [
                          GestureDetector(
                            onTap: () {},
                            child: SizedBox(
                              height: 60,
                              width: 60,
                              child: CircleAvatar(
                                backgroundColor: Colors.white,
                                child:
                                    Image.asset('assets/images/facebook.png'),
                              ),
                            ),
                          ),
                          TextButton(
                              onPressed: () {},
                              child: Text(' Facebook\nverification'))
                        ]),
                      ]),
                ]),
              ),
              Text(
                'We will not post anything on your account',
                style: TextStyle(color: Colors.black54),
              ),
              SizedBox(
                height: 30,
              ),
              Padding(
                padding: EdgeInsets.all(02),
                child: Row(children: [
                  Text(
                    '              By logging in, you agree to our',
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.black54),
                  ),
                  TextButton(
                    onPressed: () {},
                    child:
                        Text('Terms and', style: TextStyle(color: Colors.blue)),
                  ),
                ]),
              ),
              Text(
                'Conditions and Privacy Policy',
                style: TextStyle(color: Colors.blue),
              ),
              SizedBox(height: 50),
            ],
          ),
        ),
      ),
    );
  }

  final FirebaseAuth auth = FirebaseAuth.instance;

  Future<void> signup(BuildContext context) async {
    final GoogleSignIn googleSignIn = GoogleSignIn();
    final GoogleSignInAccount? googleSignInAccount =
        await googleSignIn.signIn();
    if (googleSignInAccount != null) {
      final GoogleSignInAuthentication googleSignInAuthentication =
          await googleSignInAccount.authentication;
      final AuthCredential authCredential = GoogleAuthProvider.credential(
          idToken: googleSignInAuthentication.idToken,
          accessToken: googleSignInAuthentication.accessToken);

      // Getting users credential
      UserCredential result = await auth.signInWithCredential(authCredential);
      User? user = result.user;

      if (result != null) {
        Navigator.pushNamed(context, '/home');
      }
    }
  }

8.flutter build apk --release --no-sound-null-safety 

flutter build apk --split-per-abi --no-sound-null-safety 






9.      // initialRoute: '/splash',
      // routes: {
      //   '/home': (context) => BusHomeScreen(
      //         from: '',
      //         to: '',
      //       ),
      //   '/ryde': (context) => RyderScreen(),
      //   '/redrail': (context) => RailScreen(),
      //   '/rPool': (context) => RpoolScreen(),
      //   '/mybooking': (context) => MyBookingsScreen(),
      //   '/help': (context) => HelpScreen(),
      //   '/account': (context) => MyAccountScreen(),
      //   '/splash': (context) => SpalshScreen(),
      //   '/authpage': (context) => AuthenticationPage(),
      // },
      // home: Scaffold(
      //   body: BusHomeScreen(from: '', to: ''),
      // ),


10.FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  await flutterLocalNotificationsPlugin
      .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>()
      ?.createNotificationChannel(channel);

11.InfoaneBus BusesShowing screen

  // body: StreamBuilder<QuerySnapshot>(
      //   stream: _usersStream,
      //   builder: (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {
      //     if (snapshot.hasError) {
      //       return Text(Strings.errorMsg);
      //     }
      //     if (snapshot.connectionState == ConnectionState.waiting) {
      //       return Center(child: CircularProgressIndicator());
      //     }
      //     if (snapshot.data!.docs.length == 0) {
      //       return Center(
      //         child:
      //             Column(mainAxisAlignment: MainAxisAlignment.start, children: [
      //           SizedBox(height: 80),
      //           Image.network(Strings.errorImgUrl),
      //           SizedBox(height: 10),
      //           Text(Strings.noBusText, style: MyTextStyle.headline2),
      //         ]),
      //       );
      //     }

      //     return ListView(
      //       children: snapshot.data!.docs.map((DocumentSnapshot document) {
      //         Map<String, dynamic> data =
      //             document.data()! as Map<String, dynamic>;
      //         return InkWell(
      //           child: Container(
      //             decoration:
      //                 BoxDecoration(border: Border.all(color: Colors.black12)),
      //             height: 140,
      //             child: Padding(
      //               padding: EdgeInsets.all(10),
      //               child: Column(
      //                 children: [
      //                   Row(
      //                       mainAxisAlignment: MainAxisAlignment.start,
      //                       children: [
      //                         SizedBox(
      //                           height: 25,
      //                           width: 25,
      //                           child: Image.network(Strings.building1Url),
      //                         ),
      //                         Text(Strings.text1RestStop,
      //                             style: MyTextStyle.bodyline2),
      //                       ]),
      //                   SizedBox(height: 5),
      //                   Row(
      //                       mainAxisAlignment: MainAxisAlignment.spaceBetween,
      //                       children: [
      //                         Text(data['Time'], style: MyTextStyle.headline4),
      //                         Text('Price: ${data['Amount']} ?',
      //                             style: MyTextStyle.headline4),
      //                       ]),
      //                   SizedBox(height: 5),
      //                   Row(
      //                     mainAxisAlignment: MainAxisAlignment.start,
      //                     children: [
      //                       SizedBox(
      //                         child: Image.network(Strings.building2Url),
      //                         height: 25,
      //                         width: 25,
      //                       ),
      //                       SizedBox(width: 5),
      //                       Text(data['Name'], style: MyTextStyle.headline4),
      //                     ],
      //                   ),
      //                   SizedBox(height: 5),
      //                   Row(children: [
      //                     Text('Ac/Sleeper (2+1)',
      //                         style: TextStyle(fontSize: 12)),
      //                   ]),
      //                   SizedBox(height: 5),
      //                   Row(children: [
      //                     Text(Strings.textReturnOffer,
      //                         style:
      //                             TextStyle(fontSize: 12, color: Colors.red)),
      //                   ]),
      //                 ],
      //               ),
      //             ),
      //           ),
      //           onTap: () {
      //             Navigator.push(
      //               context,
      //               MaterialPageRoute(
      //                 builder: (context) => BoardingScreen(
      //                     from: from,
      //                     to: to,
      //                     id: data['id'],
      //                     company: data['Name'],
      //                     time: data['Time'],
      //                     amount: data['Amount'],
      //                     pickup: data['Pickup'],
      //                     dropping: data['Dropping'],
      //                     finalDate: finalDate,
      //                     booked_seats: data['booked_seats'],
      //                     docId: data['docId']),
      //               ),
      //             );
      //           },
      //         );
      //       }).toList(),
      //     );
      //   },
      // ),



12.To get current state of application
class _MyHomePageState extends State<MyHomePage> with WidgetsBindingObserver {
  AppLifecycleState _notification; 
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    setState(() {
      _notification = state;
    });
  }

  @override
  initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    ...
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }
}


13.To get data from web socket 

import 'package:flutter/material.dart';
import 'package:web_socket_channel/web_socket_channel.dart';

void main() => runApp(AppLifecycleReactor());

class AppLifecycleReactor extends StatefulWidget {
  const AppLifecycleReactor({Key? key}) : super(key: key);

  @override
  State<AppLifecycleReactor> createState() => _AppLifecycleReactorState();
}

class _AppLifecycleReactorState extends State<AppLifecycleReactor>
    with WidgetsBindingObserver {
  var _channel = WebSocketChannel.connect(Uri.parse('wss://ws.ifelse.io/'));
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance!.addObserver(this);
  }

  @override
  void dispose() {
    WidgetsBinding.instance!.removeObserver(this);
    super.dispose();
  }

  AppLifecycleState? _notification;

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    switch (state) {
      case AppLifecycleState.resumed:
        print("app in resumed");
        break;
      case AppLifecycleState.inactive:
        _channel = WebSocketChannel.connect(Uri.parse('wss://ws.ifelse.io/'));
        _channel.sink.add('App in Inactive state');
        break;
      case AppLifecycleState.paused:
        print("app in paused");
          _channel = WebSocketChannel.connect(Uri.parse('wss://ws.ifelse.io/'));
        _channel.sink.add('Hii, welcome back.');
        break;
      case AppLifecycleState.detached:
        print("app in detached");
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [
            Text('Last notification: $_notification'),
            Container(
              child: StreamBuilder(
                stream: _channel.stream,
                builder: (context, snapshot) {
                  return Text(snapshot.hasData ? '${snapshot.data}' : '');
                },
              ),
            ),
          ]),
        ),
      ),
    );
  }
}

14. Getting data from RestApi (json)

// ignore_for_file: prefer_const_constructors, unnecessary_string_interpolations

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Json Example'),
        ),
        body: FutureBuilder(
            future: ReadJsonData(),
            builder: (context, data) {
              if (data.hasError) {
                return Center(child: Text("${data.error}"));
              } else if (data.hasData) {
                var items = data.data as List<Album>;
                return ListView.builder(
                    itemCount: items == null ? 0 : items.length,
                    itemBuilder: (context, index) {
                      return Card(
                        elevation: 5,
                        margin:
                            EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                        child: Container(
                          padding: EdgeInsets.all(8),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              Container(
                                  width: 50,
                                  height: 50,
                                  child: Text(items[index].image)),
                              Expanded(
                                  child: Container(
                                padding: EdgeInsets.only(bottom: 8),
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Padding(
                                      padding:
                                          EdgeInsets.only(left: 8, right: 8),
                                      child: Text(
                                        items[index].name.toString(),
                                        style: TextStyle(
                                            fontSize: 16,
                                            fontWeight: FontWeight.bold),
                                      ),
                                    ),
                                    Padding(
                                      padding:
                                          EdgeInsets.only(left: 8, right: 8),
                                      child:
                                          Text(items[index].price.toString()),
                                    )
                                  ],
                                ),
                              ))
                            ],
                          ),
                        ),
                      );
                    });
              } else {
                return Center(
                  child: CircularProgressIndicator(),
                );
              }
            }),
      ),
    );
  }

  Future<List<Album>> ReadJsonData() async {
    final jsondata =
        await http.get(Uri.parse('http://localhost:8000/getProducts'));
    final list = json.decode(jsondata.body) as List<dynamic>;
    return list.map((e) => Album.fromJson(e)).toList();
  }
}

class Album {
  String name;
  int price;
  String description;
  String image;
  Album(
      {required this.name,
      required this.price,
      required this.description,
      required this.image});

  factory Album.fromJson(Map<String, dynamic> json) {
    return Album(
        name: json['name'],
        price: json['price'],
        description: json['description'],
        image: json['image']);
  }
}

15. colors Adjustments

100% — FF

95% — F2

90% — E6

85% — D9

80% — CC

75% — BF

70% — B3

65% — A6

60% — 99

55% — 8C

50% — 80

45% — 73

40% — 66

35% — 59

30% — 4D

25% — 40

20% — 33

15% — 26

10% — 1A

5% — 0D

0% — 00



16.TubeSense

   // ListView.builder(
                    //   shrinkWrap: true,
                    //   itemCount: 5,
                    //   itemBuilder: ((context, index) => Column(children: [
                    //         SizedBox(
                    //           height: 35,
                    //           child: Column(children: [
                    //             Row(
                    //               mainAxisAlignment:
                    //                   MainAxisAlignment.spaceAround,
                    //               children: [
                    //                 Text('$index'),
                    //                 Text('name'),
                    //                 Text('jahflhfjlhfalhafaah'),
                    //               ],
                    //             ),
                    //             Divider()
                    //           ]),
                    //         )
                    //       ])),
                    // ),


17. localizationsDelegates: AppLocalizations.localizationsDelegates,
      supportedLocales: AppLocalizations.supportedLocales,


18.Themes 

class TubeSenseTheme {
  static ThemeData getTheme() {
    return ThemeData(
      fontFamily: 'Lato',
      primaryColor: Color(0xFF00A39A),
      primarySwatch: Colors.green,
      textTheme: TextTheme(
        headline6: TextStyle(
            color: Colors.white, fontWeight: FontWeight.bold, fontSize: 14),
        headline5: TextStyle(
            color: Colors.white, fontWeight: FontWeight.bold, fontSize: 16),
        headline4: TextStyle(
            color: Colors.white, fontWeight: FontWeight.bold, fontSize: 18),
        headline3: TextStyle(
            color: Colors.white, fontWeight: FontWeight.bold, fontSize: 20),
        headline2: TextStyle(
            color: Colors.white, fontWeight: FontWeight.bold, fontSize: 22),
        headline1: TextStyle(
            color: Colors.white, fontWeight: FontWeight.w500, fontSize: 24),
        bodyText1: TextStyle(color: Colors.black, fontSize: 14),
        bodyText2: TextStyle(color: Colors.black, fontSize: 12),
      ),
      appBarTheme: AppBarTheme(
        centerTitle: false,
        backgroundColor: Color(0x9900A39A),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          textStyle: TextStyle(
            fontFamily: 'Lato',
            color: Colors.white,
            fontWeight: FontWeight.w400,
            fontSize: 16,
          ),
        ),
      ),
    );
  }
}


19.generating pdf 

first make system in developer mode by going into settings 
add dependencies 
  pdf: 
  path_provider: 
  open_file: 

import 'dart:io';

import 'package:open_file/open_file.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/widgets.dart';

class PdfApi {
  static Future<File> generateSimpleWordPdf(String text) {
    final pdf = Document();
    pdf.addPage(Page(
        build: (context) => Center(
            child: Text(text,
                style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold)))));

    return saveDocument(name: 'my_example.pdf', pdf: pdf);
  }

  static Future<File> saveDocument({
    required String name,
    required Document pdf,
  }) async {
    final bytes = await pdf.save();

    final dir = await getApplicationDocumentsDirectory();
    final file = File('${dir.path}/$name');

    await file.writeAsBytes(bytes);

    return file;
  }

  static Future openFile(File file) async {
    final url = file.path;

    await OpenFile.open(url);
  }
}




import 'dart:io';

import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart';
import 'package:pdf_generator/api/pdf_api.dart';

class PdfPages {
  static Future<File> generate() async {
    final pdf = Document();
    pdf.addPage(MultiPage(
      build: (context) => <Widget>[
        buildHeader(),
        SizedBox(height: 0.5 * PdfPageFormat.cm),
        Paragraph(
          text:
              'Infoane is an IT service provider company with a proven track record of transforming business with innovative software solutions at affordable prices',
          style: TextStyle(fontSize: 20),
        ),
        Center(
          child: buildUrl(),
        ),
        buildCustomHeadline(),
        ...bulletPoints(),
        Header(child: Text('My Headline')),
        Paragraph(text: LoremText().paragraph(60)),
        Paragraph(text: LoremText().paragraph(60)),
        Paragraph(text: LoremText().paragraph(60)),
        Paragraph(text: LoremText().paragraph(60)),
        Paragraph(text: LoremText().paragraph(60)),
      ],
      footer: (context) {
        final text = 'Page ${context.pageNumber} of ${context.pagesCount}';

        return Container(
          alignment: Alignment.centerRight,
          margin: EdgeInsets.only(top: 1 * PdfPageFormat.cm),
          child: Text(
            text,
            style: TextStyle(color: PdfColors.black),
          ),
        );
      },
    ));
    return PdfApi.saveDocument(name: 'my_example.pdf', pdf: pdf);
  }

  static Widget buildHeader() {
    return Container(
        color: PdfColors.orange,
        child: Padding(
            padding: EdgeInsets.all(20),
            child: Row(children: [
              Text('Infoane Technologies pvt Ltd',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 24))
            ])));
  }

  static Widget buildCustomHeadline() => Header(
        child: Text(
          'Departments',
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: PdfColors.white,
          ),
        ),
        padding: EdgeInsets.all(4),
        decoration: BoxDecoration(color: PdfColors.orange),
      );

  static Widget buildUrl() => UrlLink(
      child: Text('www.infaonetechnologies.com',
          style: TextStyle(color: PdfColors.blue, fontSize: 16)),
      destination: 'www.infoanetechnologies.com');

  static List bulletPoints() => [
        Bullet(text: 'Cold Fusion'),
        Bullet(text: 'Flutter'),
        Bullet(text: 'Business Development'),
        Bullet(text: 'Hr Team'),
        Bullet(text: 'Manager Team')
      ];
}



20.finger print functonality 

local_auth: ^2.0.0

in app->src->main->androidManifest.xml 
uses-permission android:name="android.permission.USE_FINGERPRINT"/>


in kotlin-> MainActivity 

import io.flutter.embedding.android.FlutterFragmentActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugins.GeneratedPluginRegistrant

class MainActivity: FlutterFragmentActivity() {
    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        GeneratedPluginRegistrant.registerWith(flutterEngine)
    }
}




import 'package:local_auth/local_auth.dart';

class FingerAuthApi {
  static Future<bool> authenticateWithBiometrics() async {
    final LocalAuthentication localAuthentication = LocalAuthentication();
    bool isBiometricSupported = await localAuthentication.isDeviceSupported();
    bool canCheckBiometrics = await localAuthentication.canCheckBiometrics;

    bool isAuthenticated = false;

    if (isBiometricSupported && canCheckBiometrics) {
      isAuthenticated = await localAuthentication.authenticate(
        localizedReason: 'Please complete the biometrics to proceed.',
      );
    }

    return isAuthenticated;
  }
}
 in button 

onTap: () async {
                bool isAuthenticated =
                    await FingerAuthApi.authenticateWithBiometrics();

                if (isAuthenticated) {
                  Navigator.of(context).push(
                    MaterialPageRoute(
                      builder: (context) => HomeScreen(),
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Error authenticating using Biometrics.'),
                    ),
                  );
                }


21.  opeining top model sheet 
top_modal_sheet: ^1.0.0+1
import 'package:top_modal_sheet/top_modal_sheet.dart';

 final _topModalSheetKey = GlobalKey<TopModalSheetState>();
 onTap: () async {
            var value =
                await Navigator.of(context).push<List<int>>(PageRouteBuilder(
                    pageBuilder: (_, __, ___) {
                      return TopModalSheet(
                        key: _topModalSheetKey,
                        child: ContactInfoPage(),
                      );
                    },
                    opaque: false));

            if (value != null) {
              setState(() {});
            }
          },

22.  stop showing drawer and endDrawer on drag 

 in scaffold

 drawerEnableOpenDragGesture: false,
      endDrawerEnableOpenDragGesture: false,

23. For fingerprint option 
in Androidmanifest.xml   
<uses-permission android:name="android.permission.USE_FINGERPRINT"/>

in kotlin->mainActivity 

import io.flutter.embedding.android.FlutterFragmentActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugins.GeneratedPluginRegistrant

class MainActivity: FlutterFragmentActivity() {
    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        GeneratedPluginRegistrant.registerWith(flutterEngine)
    }
}


import 'package:local_auth/local_auth.dart';

class FingerAuthApi {
  static Future<bool> authenticateWithBiometrics() async {
    final LocalAuthentication localAuthentication = LocalAuthentication();
    bool isBiometricSupported = await localAuthentication.isDeviceSupported();
    bool canCheckBiometrics = await localAuthentication.canCheckBiometrics;

    bool isAuthenticated = false;

    if (isBiometricSupported && canCheckBiometrics) {
      isAuthenticated = await localAuthentication.authenticate(
        localizedReason: 'Please complete the biometrics to proceed.',
      );
    }

    return isAuthenticated;
  }
}


in Button
bool isAuthenticated = await FingerAuthApi.authenticateWithBiometrics();

        if (isAuthenticated) {
          Navigator.of(context).push(
            MaterialPageRoute(
              builder: (context) => HomeScreen(),
            ),
          );
        }


24. for internet connection check 

 plug in -connectivity: 
         -overlay_support: 


25. page transition  
  plug in - page_transition: 

Navigator.push(context,PageTransition(child:SecondPage(),type:PageTransitionType.fade),); 
 
type:
fade 
leftToRight 
leftToRightWithFade 
rightToLeft 
rightToLeftWithFade 
rotate 
scale 
topToBottom 
bottomToTop   
rightToLeftJoined 
leftToRightJoined 
size 
topToBottomJoined 
bottomToTopJoined

26.Share text or files in phone using flutter
  share_plus: ^4.0.4

                  final result = await FilePicker.platform.pickFiles();
                  List<String>? files = result?.files
                      .map((file) => file.path)
                      .cast<String>()
                      .toList();
                  if (files == null) {
                    return;
                  }
                  await Share.shareFiles(files); 


to share text
Share.share(_controller.text);


27.  showGeneralDialog
 this is for top to bottom slide dialog
showGeneralDialog(
        context: context,
        barrierDismissible: true,
        barrierColor: Colors.grey,
        barrierLabel: MaterialLocalizations.of(context).dialogLabel,
        transitionDuration: Duration(milliseconds: 600),
        transitionBuilder: (context, animation, secondaryanimation, child) {
          return SlideTransition(
            position: CurvedAnimation(
                    parent: animation, curve: Curves.easeInOutCubic)
                .drive(Tween<Offset>(begin: Offset(0, -1.0), end: Offset.zero)),
            child: child,
          );
        },
        pageBuilder: (BuildContext context, Animation<double> animation,
            Animation<double> secondaryAnimation) {
          return DialogPage();
        });



alert dialog with animation  with scale

Widget _dialog(BuildContext context) {
    return AlertDialog(
      title: const Text("Dialog title"),
      content: const Text("Simple Dialog content"),
      actions: <Widget>[
        TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text("Okay"))
      ],
    );
  }
 
void _scaleDialog() {
    showGeneralDialog(
      context: context,
      pageBuilder: (ctx, a1, a2) {
        return Container();
      },
      transitionBuilder: (ctx, a1, a2, child) {
        var curve = Curves.easeInOut.transform(a1.value);
        return Transform.scale(
          scale: curve,
          child: _dialog(ctx),
        );
      },
      transitionDuration: const Duration(milliseconds: 300),
    );
  }


alert dialog with rotate animation

import 'package:vector_math/vector_math.dart' as math;
 
 
Widget _dialog(BuildContext context) {
    return AlertDialog(
      title: const Text("Dialog title"),
      content: const Text("Simple Dialog content"),
      actions: <Widget>[
        TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text("Okay"))
      ],
    );
  }
 
 
void _rotateDialog() {
    showGeneralDialog(
      context: context,
      pageBuilder: (ctx, a1, a2) {
        return Container();
      },
      transitionBuilder: (ctx, a1, a2, child) {
        return Transform.rotate(
          angle: math.radians(a1.value * 360),
          child: _dialog(ctx),
        );
      },
      transitionDuration: const Duration(milliseconds: 300),
    );
  }


ElevatedButton(
onPressed:(){ 
_rotateDialog();
}, 
child:Text('Rotated Dialog'), 
),


Future<Object?> _scaleDialog(BuildContext context) {
    return showGeneralDialog(
        context: context,
        transitionDuration: Duration(microseconds: 300),
        transitionBuilder: (context, a1, a2, child) {
          return Transform.scale(
            scale: Curves.easeInOut.transform(a1.value),
            child: _dialog(context),
          );
        },
        pageBuilder: (context, a1, a2) {
          return Container();
        });
  }



28.  Pie Chart legend 

   Padding(
            padding: EdgeInsets.all(15),
            child:
                Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
              Text(Strings.textYourAllocationForAccount,
                  style: TextStyle(color: Colors.black45)),
              SizedBox(
                height: MediaQuery.of(context).size.height * 0.005,
              ),
              Text(Strings.textPmEliteHybrid),
              CustomContainer(Color(0XFF9aab99), Strings.textABDiscoveryGrowth),
              CustomContainer(Color(0XFFa4816e), Strings.textABDiscoveryValue),
              CustomContainer(
                  Color(0XFFdff2df), Strings.textAmericanCenturyMidCapValue),
              CustomContainer(Color(0XFFEbf6ee), Strings.textDfaIntlCoreEq),
              CustomContainer(Color(0XFFC4e0a3), Strings.textDfaUsCoreEq),
              CustomContainer(
                  Color(0XFFBac8e3), Strings.textDfaUsSmallCapValue),
              CustomContainer(Color(0XFFf8faf7), Strings.textFedShrtTrmFnd),
              CustomContainer(Color(0XFFdae5bd),
                  Strings.textFederatedInstitutionalHighYield),
              CustomContainer(
                  Color(0XFFE5faeb), Strings.textVanguardGrowthIndex),
              CustomContainer(Color(0XFFf5f9fa),
                  Strings.textVanguardIntermTermInvestmentGrade),
              CustomContainer(Color(0XFFD9ee75), Strings.textVgShTrmFedAdm),
              CustomContainer(Color(0XFF97a3b1),
                  Strings.textVanguardShortTermInvestmentGrade),
              CustomContainer(
                  Color(0XFF897ff2),Strings.textVanguardSmallCapGrowthIndex),
              CustomContainer(Color(0XFFe1caab), Strings.textVgValueIndex),
              SizedBox(
                height: MediaQuery.of(context).size.height * 0.010,
              ),
              Text(Strings.textInvestmentNote,
                  style: Theme.of(context)
                      .textTheme
                      .bodyText2!
                      .copyWith(color: Colors.black38)),
            ]),
          ),

29. Pm TransactionHistory widget 



  Widget TransactionHistoryContainer(String text, double price) {
    return ListView.builder(
        itemCount: 1,
        itemBuilder: (contex, i) {
          return Container(
            decoration: BoxDecoration(color: Colors.white, boxShadow: [
              BoxShadow(
                color: Colors.black12,
              )
            ]),
            width: double.infinity,
            child: Card(
              child: Padding(
                padding: EdgeInsets.only(top: 10, bottom: 10, left: 20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      text,
                      style: Theme.of(context).textTheme.bodyText1!.copyWith(
                          color: PlanMemberColors.myAdvisorColor, fontSize: 16),
                    ),
                    Text('\$0.01',
                        style: Theme.of(context)
                            .textTheme
                            .bodyText1!
                            .copyWith(fontSize: 32)),
                    SizedBox(
                        height: MediaQuery.of(context).size.height * 0.008),
                    Text(
                      Strings.textFundName,
                      style: Theme.of(context)
                          .textTheme
                          .bodyText1!
                          .copyWith(color: Colors.black45, fontSize: 16),
                    ),
                    Text(Strings.textFdFederatedHermInst,
                        style: Theme.of(context)
                            .textTheme
                            .bodyText1!
                            .copyWith(color: PlanMemberColors.drawerColor)),
                    SizedBox(
                        height: MediaQuery.of(context).size.height * 0.008),
                    Text(Strings.textTransactionType,
                        style: Theme.of(context)
                            .textTheme
                            .bodyText1!
                            .copyWith(color: Colors.black45, fontSize: 16)),
                    Text(Strings.textAccuralDividendReinvest,
                        style: Theme.of(context)
                            .textTheme
                            .bodyText1!
                            .copyWith(color: PlanMemberColors.drawerColor)),
                    SizedBox(
                        height: MediaQuery.of(context).size.height * 0.008),
                    Text(
                      Strings.textSharesUnits,
                      style: Theme.of(context)
                          .textTheme
                          .bodyText1!
                          .copyWith(color: Colors.black45, fontSize: 16),
                    ),
                    Text(
                      '0.001',
                      style: Theme.of(context)
                          .textTheme
                          .bodyText1!
                          .copyWith(color: PlanMemberColors.drawerColor),
                    ),
                    SizedBox(
                        height: MediaQuery.of(context).size.height * 0.008),
                    Text(
                      Strings.textPrice,
                      style: Theme.of(context)
                          .textTheme
                          .bodyText1!
                          .copyWith(color: Colors.black45, fontSize: 16),
                    ),
                    Text(
                      '\$$price',
                      style: Theme.of(context)
                          .textTheme
                          .bodyText1!
                          .copyWith(color: PlanMemberColors.drawerColor),
                    ),
                    Divider(
                      thickness: 1,
                    ),
                  ],
                ),
              ),
            ),
          );
        });
  }
}



30.  calendar widget 


//  TableCalendar(
//                 calendarFormat: format,
//                 firstDay: DateTime.utc(2020, 1, 1),
//                 lastDay: DateTime.utc(2030, 12, 31),
//                 focusedDay: focusedDay,

//                 //event loader
//                 eventLoader: getEventsforDay,
//                 // calendar format
//                 onFormatChanged: (CalendarFormat _format) {
//                   setState(() {
//                     format = _format;
//                   });
//                 },
//                 //day changed
//                 onDaySelected: (DateTime selectDay, DateTime focusDay) async {
//                   setState(() {
//                     selectedDay = selectDay;
//                     focusDay = focusDay;
//                   });
//                   print(selectedEvents);

//                   date = DateFormat.yMd().format(selectedDay);
//                 },
//                 selectedDayPredicate: (DateTime date) {
//                   return isSameDay(selectedDay, date);
//                 },
//                 // To style the calendar
//                 calendarStyle: CalendarStyle(
//                   markerDecoration: BoxDecoration(
//                       shape: BoxShape.rectangle, color: Colors.green),
//                   isTodayHighlighted: true,
//                   todayDecoration: BoxDecoration(
//                     color: Colors.blue,
//                     shape: BoxShape.rectangle,
//                   ),
//                   selectedDecoration: BoxDecoration(
//                     color: Colors.orange,
//                     shape: BoxShape.rectangle,
//                   ),
//                   weekendTextStyle: TextStyle(color: Colors.red),
//                 ),
//                 weekendDays: const [DateTime.saturday, DateTime.sunday],
//                 headerStyle: const HeaderStyle(
//                   titleTextStyle: TextStyle(
//                     color: Colors.black,
//                     fontSize: 20.0,
//                   ),
//                   formatButtonTextStyle: TextStyle(
//                     color: Colors.white,
//                     fontSize: 16.0,
//                   ),
//                   formatButtonDecoration: BoxDecoration(
//                     color: Colors.blue,
//                     borderRadius: BorderRadius.all(
//                       Radius.circular(5.0),
//                     ),
//                   ),
//                   leftChevronIcon: Icon(
//                     Icons.chevron_left,
//                     color: Colors.black,
//                     size: 28,
//                   ),
//                   rightChevronIcon: Icon(
//                     Icons.chevron_right,
//                     color: Colors.black,
//                     size: 28,
//                   ),
//                 ),
//               ),



    // ...getEventsforDay(selectedDay).map(
    //             (selectedEvents) => Column(
    //               children: [
    //                 Container(
    //                   decoration: BoxDecoration(
    //                     borderRadius: BorderRadius.circular(15),
    //                     border: Border.all(
    //                       color: Colors.black38,
    //                     ),
    //                   ),
    //                   child: ListTile(
    //                     title: Text(selectedEvents.task),
    //                   ),
    //                 ),
    //                 SizedBox(
    //                   height: 10,
    //                 ),
    //               ],
    //             ),
    //           ),


31. calendar plug in 2.33  version


SingleChildScrollView(
        child: Column(
          children: [
            TableCalendar(
              calendarController: _controller,
              events: selectedEvents,
              initialCalendarFormat: CalendarFormat.month,
              calendarStyle: CalendarStyle(
                  canEventMarkersOverflow: true,
                  todayColor: Colors.blue,
                  selectedColor: Colors.orange,
                  todayStyle: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 18.0,
                      color: Colors.white)),
              headerStyle: HeaderStyle(
                formatButtonVisible: false,
                centerHeaderTitle: true,
              ),
              onDaySelected: (date, events, holidays) {
                setState(() {
                  selectedEvents1 = events;

                  focusedDay = date;
                  selectedDay = date;
                  date1 = DateFormat.yMd().format(date);
                  _selectedEvents =
                      selectedEvents[DateFormat('yMd').parse(date1)];
                });
                print(selectedTask);

                print(_selectedEvents);
              },
              startingDayOfWeek: StartingDayOfWeek.sunday,
              builders: CalendarBuilders(
                selectedDayBuilder: (context, date, events) => Container(
                  margin: const EdgeInsets.all(4.0),
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                      color: Theme.of(context).primaryColor,
                      borderRadius: BorderRadius.circular(10.0)),
                  child: Text(
                    date.day.toString(),
                    style: TextStyle(color: Colors.white),
                  ),
                ),
                todayDayBuilder: (context, date, events) => Container(
                  margin: const EdgeInsets.all(4.0),
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                      color: Colors.orange,
                      borderRadius: BorderRadius.circular(10.0)),
                  child: Text(
                    date.day.toString(),
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
            ),
            SizedBox(
              height: 25,
            ),
            ...getEventsforDay(selectedDay).map(
              (selectedEvents1) => Column(
                children: [
                  Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(15),
                      border: Border.all(
                        color: Colors.black38,
                      ),
                    ),
                    child: ListTile(
                      title: Text(selectedEvents1.task),
                    ),
                  ),
                  SizedBox(
                    height: 10,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),

32.  user model for sheets api


// class User {
//   User({
//     required this.date,
//     required this.task,
//     required this.isVerified,
//   });

//   final int date;
//   final String task;
//   final bool isVerified;

//   factory User.fromJson(String str) => User.fromMap(json.decode(str));

//   String toJson() => json.encode(toMap());

//   factory User.fromMap(Map<String, dynamic> json) => User(
//         date: json[UserFields.date],
//         task: json[UserFields.task],
//         isVerified: json[UserFields.isVerified],
//       );

//   Map<String, dynamic> toMap() => {
//         UserFields.date: date,
//         UserFields.task: task,
//         UserFields.isVerified: isVerified
//       };
// }

33. work sheet connectivity 



import '../model/user_fields.dart';

class SheetsApi {
  static const _credentials = r''' 
   {
  "type": "service_account",
  "project_id": "gsheets-353917",
  "private_key_id": "204bd30ce8b78af578784cc7b899f0743a11426b",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDZgmZJoBYcGsSJ\nyfBBdOPN058QEKkeAAHYD8i1CoTE5YpuNMCCEh6C5KAX/BhA6WwZq9vuSdw9ze6a\niWdHHoaIDIovZdVqmDif9nvPpfxFqOcTOn78dhQd9MkNF5VWc0mgi+vaNKYW3vf1\nQcDHLE87pY1Zu9UdQ1blv2OvCvl4BHVTD5y+XQ//dwKAjJNHOT0qaW3TWW2PPVHF\nJGLfbF53pCm2NavenhMa3xBLI+v3/ifum4Yl7WdgoOJ0OypcF4WgWTjv5ilpmPqS\nBlo/U+i8DXJXLwSwupUKmgwfMpGw6d425r2GRIuPJhSR3aN3fpPobxID9xII0SeA\nOiEG/dHbAgMBAAECggEALiQF699sYUjiYXJ3p4MS4jJev0sxfP42Ze2vP4x8LsKc\n05UYM1+BnnW+amgdgwOhXW7CKHH9qRS65Yh5YrJcipbSZ4ycMdEZzgE9MYb+FY7n\negJCNu8bhGFNlxvmH6E0QLz96tuZUie5hQsOSJIjOr17V0pLwrnqwLERhev3kNhJ\nIN9UDM0/PODnVuLNcDCT4y9++HpFFHWPomUSkKkgPGSpvlODlxj2TwYVU1Bga/gh\nQ9kPpW0V7Q+mJ3dNp98lczDiJmnUVHerfHZdpGtBBM74ecLrlWVs+Tut2wudtuDa\n/TV54Fkq3RKMGc/dQ/i5A3EWvzxcQ0AEDqwhrHYWFQKBgQDxcWsy2G8GF6h5n7TS\n5pisdGnTdec5PDP8/rrOJOQSLlMaP2icrlDMjpnVeAgsfA/FsPLCBa/rmYJtydwL\njBe7FaYaUqoDiRbnu/5RDRkoanNziNnpf909TwDcw03hwBgxmCWRW+lKNC7bHX54\n9bpGXc1ChwPReoLex7GmWK3zDQKBgQDmn5Lij/osOg8um5XVL3PTwFSw5R2ea911\nS37XMt+QSe0ZBWc0PqU2kJvhIdViSOMCQi7dqDkTenzn+LlF2Mulab3lCZn4xpco\njYnTIwV/zee3JNDEmkZu/JjJlxErrGHeAVM6/e6XNLsUzd+XvdL6pekUBy6JMmfk\naEgZAJu+hwKBgCvwnzi+qN3r+k5AIXFsZAamnQfN4knJShDV7vtLPXKNmbQiLBCv\nrKa9oQN3d81YuqoYvOVQkaaH5nPCk9hKI5t5oiQSPTyte0yrKupnPtfbH628DyRu\nj73znc2PgaH/Cqgj71pX5soJWymnYXf0CHV75rofxjMeX6jZoNwMMYQVAoGBAKVP\noxlV/QywvWs6SUecERmrFsoKIZYKWZ8Xc59MLyadZx/1WIoBkamwNJxHBU7DUj2v\nNSrbx7XnqhsZlay0fx1d06mWnVDPAVEnS7EVvH5lGQCVmjQjJfOuitKNv9gfY7Og\nHYn+tYSbXrLF880wW0ghnxYlI71ibUgzW+LYJcuHAoGBANyC+Njc1U5V860yMYbD\noq1mN2QV8Ndj7hwdv9s47MfV2D5tmcm3suT6nmLJOvRQdL5QIQDdZGaIM8RTG3sM\nfhXHseecYTCp2u+3jLa1M7gmVveAie9o3g6AtU5Nqz1OCJSuboukY6NC6cIOtY7t\nynC0Hb1rC8foKjYriMoyHeZ9\n-----END PRIVATE KEY-----\n",
  "client_email": "gsheets@gsheets-353917.iam.gserviceaccount.com",
  "client_id": "111525757338161128604",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/gsheets%40gsheets-353917.iam.gserviceaccount.com"
} ''';

  static final _spreadSheetId = '1FLBoNCvL4sT05ifbDJYOJ0P3m1GrH7XFqo5Rzkm0VU4';
  static final _gsheets = GSheets(_credentials);
  static Worksheet? _userSheet;
  static Future init() async {
    try {
      final spreadsheet = await _gsheets.spreadsheet(_spreadSheetId);
      _userSheet = await _getWorkSheet(spreadsheet, title: 'users');
      final firstRow = UserFields.getFields();
      _userSheet!.values.insertRow(1, firstRow);
    } catch (e) {
      print('print Error: $e');
    }
  }

  static Future<Worksheet> _getWorkSheet(Spreadsheet spreadsheet,
      {required String title}) async {
    try {
      return await spreadsheet.addWorksheet(title);
    } catch (e) {
      return spreadsheet.worksheetByTitle(title)!;
    }
  }

  static Future<List<User>> getAll() async {
    if (_userSheet == null) return <User>[];
    final users = await _userSheet!.values.map.allRows();
    return users == null ? <User>[] : users.map(User.fromJson).toList();
  }

  static Future<int> getRowCount() async {
    if (_userSheet == null) return 0;
    final lastRow = await _userSheet!.values.lastRow();
    return lastRow == null ? 0 : int.tryParse(lastRow.first) ?? 0;
  }

  static Future insert(List<Map<String, dynamic>> rowList) async {
    if (_userSheet == null) {
      return null;
    }
    _userSheet!.values.map.appendRows(rowList);
  }

  static Future insertVerification(
      {required String date,
      required String key,
      required String value}) async {
    if (_userSheet == null) {
      return false;
    }
    return _userSheet!.values
        .insertValueByKeys(value, columnKey: key, rowKey: date);
  }

  Future<Map<DateTime, List<Event>>> getData() async {
    Map<DateTime, List<Event>> selectedEvents = {};
    Map<DateTime, List<Event>> tasks = {};
    List<User?> data = await SheetsApi.getAll();

    for (int i = 0; i < data.length; i++) {
      tasks[DateFormat('yMd').parse(data[i]!.date)] = [
        Event(task: data[i]!.task)
      ];
      selectedEvents[DateFormat('yMd').parse(data[i]!.date)] = [
        (Event(task: data[i]!.task))
      ];
    }
    selectedEvents.addAll(tasks);
    return selectedEvents;
  }
}

34. background image 


 ShaderMask(
          shaderCallback: ((bounds) => const LinearGradient(
                  colors: [Colors.white70, Colors.white],
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter)
              .createShader(bounds)),
          child: Container(
            height: MediaQuery.of(context).size.height,
            width: MediaQuery.of(context).size.width,
            color: Theme.of(context).primaryColor,
            child: Image.network(
                "https://cdn.dribbble.com/users/1338391/screenshots/15461540/media/040828259b15aa838bfc68b664051db0.jpg?compress=1&resize=1000x750&vertical=top",
                color: Colors.white60,
                fit: BoxFit.contain,
                alignment: Alignment.bottomRight),
          ),
        ),

35.  show verification in calendar  

 verifiedEvents[focusedDay] != null
                ? Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(15),
                      border: Border.all(
                        color: Colors.black38,
                      ),
                    ),
                    child: ListTile(
                      title: Text('${verifiedEvents[focusedDay]}'),
                    ),
                  )
                : Container(),
            // ...getEventsforDay(focusedDay).map(
            //   (selectedEvents) => Column(
            //     children: [
            //       Container(
            //         decoration: BoxDecoration(
            //           borderRadius: BorderRadius.circular(15),
            //           border: Border.all(
            //             color: Colors.black38,
            //           ),
            //         ),
            //         child: ListTile(
            //           title: Text(selectedEvents.task),
            //         ),
            //       ),
            //       SizedBox(
            //         height: 10,
            //       ),
            //     ],
            //   ),
            // )


2022-07-11 12:00:00.000Z
2022-01-14 00:00:00.000

36. Date conversion 

  // DateTime change(String val) {
  //   var epoch = DateTime(1899, 12, 30);
  //   var currentDate = epoch.add(Duration(
  //     days: int.parse(val),
  //   ));
  //   var ch1 = DateFormat("yyyy-dd-MM HH:mm:ss").format(currentDate);
  //   var ch = DateTime.parse(ch1).toUtc().toIso8601String().replaceAll("T", " ");
  //   return DateTime.parse(ch).add(const Duration(hours: 6, minutes: 30));
  // }

-----------------------------------------------------------------------------------------------------------
 DateTime change(String val) {
    if (val.length >= 6) {
      var inputFormat = DateFormat('MM/dd/yyyy');
      var date1 = inputFormat.parse(val);
      var ch1 = DateFormat("yyyy-dd-MM HH:mm:ss")
          .format(DateTime.parse(date1.toString()));
      var ch = date1.toUtc().toIso8601String().replaceAll("T", " ");
      return DateTime.parse(ch).add(Duration(hours: 17, minutes: 30));
    } else {
      var epoch = DateTime(1899, 12, 30);
      var currentDate = epoch.add(Duration(
        days: int.parse(val),
      ));
      var ch1 = DateFormat("yyyy-dd-MM HH:mm:ss").format(currentDate);
      var ch =
          DateTime.parse(ch1).toUtc().toIso8601String().replaceAll("T", " ");
      // print(DateTime.parse(ch).add(Duration(hours: 17,minutes: 30)));
      return DateTime.parse(ch).add(Duration(hours: 6, minutes: 30));
    }
  }
-----------------------------------------------------------------------------------------------------------------
 DateTime changeTo(String val) {
    var inputFormat = DateFormat('MM/dd/yyyy');
    var date1 = inputFormat.parse(val);
    var ch1 = DateFormat("yyyy-dd-MM HH:mm:ss")
        .format(DateTime.parse(date1.toString()));
    var ch = date1.toUtc().toIso8601String().replaceAll("T", " ");
    return DateTime.parse(ch).add(Duration(hours: 6, minutes: 30));
  }
---------------------------------------------------------------------------------------------------------------------
37.  
back image
'https://cdn.dribbble.com/users/1338391/screenshots/15461540/media/040828259b15aa838bfc68b664051db0.jpg?compress=1&resize=1000x750&vertical=top'
 'https://cdn.dribbble.com/users/1016207/screenshots/17927064/media/e9beb96ab8e7a7e7a79f7a39f0c6c548.jpg?compress=1&resize=800x600&vertical=top'
---------------------------------------------------------------------------------------------------------------------
38. To make dates unavailable after current date for calendar 

  enabledDayPredicate: (DateTime date) {
                      final now = DateTime.now();
                      if (date.isAfter(now)) {
                        return false;
                      }
                      return true;
                    },


--------------------------------------------------------------------------------------------------------------
38. Flavors in flutter
  1.dev
  2.prod 
  3.prod_with_dev 
  4.admin  

4 flavors 

flutter run --flavor dev -t lib/main_dev.dart
